resource "file-content" "f2fdea62-136f-49eb-9b2f-51c2daf223c7" {
  uuid = "f2fdea62-136f-49eb-9b2f-51c2daf223c7"
  content = <<EOFSCRIBE
import json
import sys
import ovh
import re
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from morpheuscypher import Cypher

# Funzione per inviare l'email
def invia_email(subject, body, recipient):
    smtp_server = "sandbox.smtp.mailtrap.io"
    smtp_port = 587
    smtp_user = "31384e4baf21ce"
    smtp_password = "2e8c46b3f80509"

    msg = MIMEMultipart()
    msg['From'] = smtp_user
    msg['To'] = recipient
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.sendmail(msg['From'], [msg['To']], msg.as_string())
        print(f"Email inviata con successo a {recipient}")
    except smtplib.SMTPException as email_error:
        print(f"Errore durante l'invio dell'email: {email_error}", flush=True)
    except Exception as e:
        print(f"Errore sconosciuto durante l'invio dell'email: {e}", flush=True)

# Variabile per tenere traccia dello stato del task
exit_code = 0  # Impostato su 0 per il successo

try:
    if len(sys.argv) != 3:
        raise ValueError("Numero di argomenti non valido. Sono richiesti esattamente 2 argomenti.")

    # Prendi i valori segreti per l'autenticazione con l'API di OVH
    application_key = Cypher(morpheus=morpheus).get('secret/OVH-APPLICATION-KEY')
    application_secret = Cypher(morpheus=morpheus).get('secret/OVH-APPLICATION-SECRET')
    consumer_key = Cypher(morpheus=morpheus).get('secret/OVH-CONSUMER-KEY')

    # Ottieni i valori dagli argomenti
    zone_name = sys.argv[1]
    target_ip = sys.argv[2]
    vm_name = morpheus['instance']['name']

    if not vm_name or not zone_name or not target_ip:
        raise ValueError("vm_name, zone_name o target_ip non possono essere vuoti.")

    def is_valid_ip(ip):
        pattern = re.compile(r"^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
        return pattern.match(ip)

    if not is_valid_ip(target_ip):
        raise ValueError("L'indirizzo IP fornito non è valido.")

    # Configurazione del client OVH
    client = ovh.Client(
        endpoint='ovh-eu',
        application_key=application_key,
        application_secret=application_secret,
        consumer_key=consumer_key,
    )

    # Funzione per verificare l'esistenza del record DNS A
    def check_existing_record(vm_name):
        try:
            records = client.get(f"/domain/zone/{zone_name}/record", fieldType='A', subDomain=vm_name)
            if records:
                raise ValueError(f"Esiste già un record DNS A per il sottodominio {vm_name}.")
        except ovh.exceptions.ResourceNotFoundError:
            raise ValueError("La zona DNS non esiste.")
        except ovh.exceptions.APIError as api_error:
            raise ValueError(f"Errore API OVH durante la verifica: {str(api_error)}")

    # Funzione per creare il record DNS A
    def create_dns_record(vm_name, target_ip):
        try:
            result = client.post(f"/domain/zone/{zone_name}/record",
                                 fieldType='A',
                                 subDomain=vm_name,
                                 target=target_ip,
                                 ttl=0)
            if not result.get('id'):
                raise ValueError("Creazione del record DNS fallita, nessun ID restituito.")
            return result
        except ovh.exceptions.ResourceNotFoundError:
            raise ValueError("La zona DNS non esiste.")
        except ovh.exceptions.APIError as api_error:
            raise ValueError(f"Errore API OVH: {str(api_error)}")

    # Funzione per eseguire il refresh della zona DNS
    def refresh_zone(zone_name):
        try:
            client.post(f"/domain/zone/{zone_name}/refresh")
        except ovh.exceptions.ResourceNotFoundError:
            raise ValueError("La zona DNS non esiste.")
        except ovh.exceptions.APIError as api_error:
            raise ValueError(f"Errore API OVH durante il refresh: {str(api_error)}")

    # Verifica se esiste già un record DNS
    check_existing_record(vm_name)

    # Crea il record DNS
    dns_result = create_dns_record(vm_name, target_ip)

    # Se la creazione del record ha successo, esegui il refresh della zona
    refresh_zone(zone_name)

    # Se tutto è andato bene, restituisce un messaggio di successo e il risultato della chiamata API
    result = {
        "status": "success",
        "message": "Record DNS creato e zona DNS aggiornata con successo.",
        "zone_name": zone_name,
        "target_ip": target_ip,
        "vm_name": vm_name,
        "dns_result": dns_result
    }

except ValueError as ve:
    exit_code = 1
    error_message = str(ve)
    result = {
        "status": "failed",
        "message": error_message,
    }
    # Invia email in caso di errore
    invia_email("Errore Task DNS OVH", error_message, morpheus['user']['email'])

except ovh.exceptions.APIError as api_err:
    exit_code = 1
    error_message = f"Errore API OVH: {str(api_err)}"
    result = {
        "status": "failed",
        "message": error_message,
    }
    # Invia email in caso di errore API
    invia_email("Errore API Task DNS OVH", error_message, morpheus['user']['email'])

except Exception as e:
    exit_code = 1
    error_message = f"Errore durante l'esecuzione: {str(e)}"
    result = {
        "status": "failed",
        "message": error_message,
    }
    # Invia email in caso di errore generico
    subject = f"Errore Generico Task DNS OVH {morpheus['instance']['name']}"
    invia_email(subject, error_message, morpheus['user']['email'])

# Imposta il risultato finale in formato JSON
final_output = json.dumps(result)

# Stampa il risultato in formato JSON
print(final_output, flush=True)

# Imposta il codice di uscita per far fallire o riuscire il task
sys.exit(exit_code)

EOFSCRIBE
  dateCreated = "2024-09-20T09:47:39.000Z"
  lastUpdated = "2024-10-02T10:14:16.000Z"
}